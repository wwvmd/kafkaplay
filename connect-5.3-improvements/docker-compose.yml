---
version: '2'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
  kafka:
    image: confluentinc/cp-enterprise-kafka:5.3.1
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      #KAFKA_ZOOKEEPER_CONNECT: localhost:22181,localhost:32181,localhost:42181
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: SSL://kafka:29092,SSL_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: SSL:SSL,SSL_HOST:SSL
      KAFKA_SSL_KEYSTORE_FILENAME: kafka.broker1.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: broker1_keystore_creds
      KAFKA_SSL_KEY_CREDENTIALS: broker1_sslkey_creds
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.broker1.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: broker1_truststore_creds
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: " "
      KAFKA_SSL_CLIENT_AUTH: requested
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      #KAFKA_OPTS: -Djavax.net.debug=all
      KAFKA_LOG4J_LOGGERS: 'kafka.authorizer=DEBUG'
      #LOG4J_LOGGER_KAFKA_AUTHORIZER_LOGGER: 'DEBUG, authorizerAppender'
    volumes:
      - ${KAFKA_SSL_SECRETS_DIR}:/etc/kafka/secrets
    # extra_hosts:
      # - "moby:127.0.0.1"
    ports:
      - 9092:9092
      - 29092:19092
  # kafka:
    # image: confluentinc/cp-enterprise-kafka:5.3.0
    # container_name: kafka
    # depends_on:
      # - zookeeper
    # ports:
    # # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    # # An important note about accessing Kafka from clients on other machines:
    # # -----------------------------------------------------------------------
    # #
    # # The config used here exposes port 9092 for _external_ connections to the broker
    # # i.e. those from _outside_ the docker network. This could be from the host machine
    # # running docker, or maybe further afield if you've got a more complicated setup.
    # # If the latter is true, you will need to change the value 'localhost' in
    # # KAFKA_ADVERTISED_LISTENERS to one that is resolvable to the docker host from those
    # # remote clients
    # #
    # # For connections _internal_ to the docker network, such as from other services
    # # and components, use kafka:29092.
    # #
    # # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
    # # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    # #
      # - 9092:9092
      # - 29092:29092
    # # environment:
      # # KAFKA_BROKER_ID: 1
      # # KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # # #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      # # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: SSL:SSL,SSL_HOST:SSL
      # # #KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # # #KAFKA_INTER_BROKER_LISTENER_NAME: SSL
      # # #KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      # # KAFKA_ADVERTISED_LISTENERS: SSL://kafka:29092,SSL_HOST://localhost:9092
      # # KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL
      # # # KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      # # KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # # KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      # # KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      # # KAFKA_SSL_KEYSTORE_FILENAME: kafka.broker1.keystore.jks
      # # KAFKA_SSL_KEYSTORE_CREDENTIALS: broker1_keystore_creds
      # # KAFKA_SSL_KEY_CREDENTIALS: broker1_sslkey_creds
      # # KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.broker1.truststore.jks
      # # KAFKA_SSL_TRUSTSTORE_CREDENTIALS: broker1_truststore_creds
      # # KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: " "
      # # KAFKA_SSL_CLIENT_AUTH: requested
      # # KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL
      # # #KAFKA_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets2
      # # #KAFKA_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets2
      # # # CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      # # # CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      # # # CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      # # # CONFLUENT_METRICS_ENABLE: 'true'
      # # # CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      # # # CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: SSL      
      # # # CONFLUENT_METRICS_REPORTER_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/client/client.truststore.jks
      # # # CONFLUENT_METRICS_REPORTER_SSL_TRUSTSTORE_PASSWORD: password1
      # # # CONFLUENT_METRICS_REPORTER_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/client/client.keystore.jks
      # # # CONFLUENT_METRICS_REPORTER_SSL_KEYSTORE_PASSWORD: password1
      # # # CONFLUENT_METRICS_REPORTER_SSL_KEY_PASSWORD: password1
      # # # CONFLUENT_METRICS_REPORTER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ''
      # # #
    # environment:
      # KAFKA_BROKER_ID: 1
      # #KAFKA_ZOOKEEPER_CONNECT: localhost:22181,localhost:32181,localhost:42181
      # KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # KAFKA_ADVERTISED_LISTENERS: SSL://kafka:29092,SSL_HOST://localhost:9092
      # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: SSL:SSL,SSL_HOST:SSL
      # KAFKA_SSL_KEYSTORE_FILENAME: kafka.broker1.keystore.jks
      # KAFKA_SSL_KEYSTORE_CREDENTIALS: broker1_keystore_creds
      # KAFKA_SSL_KEY_CREDENTIALS: broker1_sslkey_creds
      # KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.broker1.truststore.jks
      # KAFKA_SSL_TRUSTSTORE_CREDENTIALS: broker1_truststore_creds
      # KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: " "
      # KAFKA_SSL_CLIENT_AUTH: requested
      # KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL
      # KAFKA_MIN_INSYNC_REPLICAS: 1
      # KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    # volumes:
      # - ${KAFKA_SSL_SECRETS_DIR}:/etc/kafka/secrets
      # - ${CONNECT_SSL_SECRETS_DIR}:/etc/kafka/secrets/client
  schema-registry:
    image: confluentinc/cp-schema-registry:5.3.1
    container_name: schema-registry
    ports:
      - 8081:8081
    depends_on:
      - zookeeper
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
  # ksql-server:
    # image: confluentinc/cp-ksql-server:5.3.0
    # container_name: ksql-server
    # ports:
      # - 8088:8088
    # depends_on:
      # - kafka
    # environment:
      # KSQL_BOOTSTRAP_SERVERS: kafka:29092
      # KSQL_LISTENERS: http://0.0.0.0:8088
      # KSQL_KSQL_SERVICE_ID: confluent_rmoff_01
      # KSQL_CUB_KAFKA_TIMEOUT: 300
      # KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # # -v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v
      # # Useful settings for development/laptop use - modify as needed for Prod
      # KSQL_KSQL_COMMIT_INTERVAL_MS: 2000
      # KSQL_KSQL_SINK_PARTITIONS: 1
      # KSQL_KSQL_CACHE_MAX_BYTES_BUFFERING: 10000000
      # KSQL_KSQL_STREAMS_AUTO_OFFSET_RESET: earliest
      # # -v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v
      # # Producer Confluent Monitoring Interceptors for Control Center streams monitoring
      # KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      # KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
  # ksql-cli:
    # image: confluentinc/cp-ksql-cli:5.3.0
    # container_name: ksql-cli
    # depends_on:
      # - ksql-server
    # entrypoint: /bin/sh
    # tty: true
  kafka-connect-01:
    #image: cp-connect-base-local:latest
    image: confluentinc/cp-kafka-connect:5.3.1
    container_name: kafka-connect-01
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
    ports:
      - 8083:8083
      - 8080:8080
      - 8443:8443
    environment:
      CONNECT_LISTENERS: 'http://kafka-connect-01:8080,https://kafka-connect-01:8443'
      CONNECT_BOOTSTRAP_SERVERS: "kafka:29092"
      #CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _connect-status
      CONNECT_CONNECTOR_CLIENT_CONFIG_OVERRIDE_POLICY: 'All'
      #CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      #CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect-01"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      #CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR,io.confluent.connect.jdbc=TRACE"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR,io.confluent.connect.jdbc=TRACE"
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components/'
      CONNECT_SECURITY_PROTOCOL: SSL
      CONNECT_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/client/client.truststore.jks
      CONNECT_SSL_TRUSTSTORE_PASSWORD: password1
      CONNECT_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/client/client.keystore.jks
      CONNECT_SSL_KEYSTORE_PASSWORD: password1
      CONNECT_SSL_KEY_PASSWORD: password1
      CONNECT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: " "
      CONNECT_SSL_ENABLED_PROTOCOLS: "TLSv1.2,TLSv1.1,TLSv1"
      CONNECT_PRODUCER_BOOTSTRAP_SERVERS: kafka:29092
      CONNECT_PRODUCER_SECURITY_PROTOCOL: SSL 
      CONNECT_PRODUCER_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/client/client.truststore.jks
      CONNECT_PRODUCER_SSL_TRUSTSTORE_PASSWORD: password1  
      CONNECT_PRODUCER_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/client/client.keystore.jks
      CONNECT_PRODUCER_SSL_KEYSTORE_PASSWORD: password1
      CONNECT_PRODUCER_SSL_KEY_PASSWORD: password1
      CONNECT_PRODUCER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: " "
      CONNECT_CONSUMER_BOOTSTRAP_SERVERS: kafka:29092
      CONNECT_CONSUMER_SECURITY_PROTOCOL: SSL
      CONNECT_CONSUMER_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/client/client.truststore.jks
      CONNECT_CONSUMER_SSL_TRUSTSTORE_PASSWORD: password1
      CONNECT_CONSUMER_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/client/client.keystore.jks
      CONNECT_CONSUMER_SSL_KEYSTORE_PASSWORD: password1
      CONNECT_CONSUMER_SSL_KEY_PASSWORD: password1
      CONNECT_CONSUMER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: " "
      #Listeners -       listeners.https.ssl.*
      CONNECT_LISTENERS_HTTPS_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      CONNECT_LISTENERS_HTTPS_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/client/ssl-server.jks
      CONNECT_LISTENERS_HTTPS_SSL_TRUSTSTORE_PASSWORD: changeit
      CONNECT_LISTENERS_HTTPS_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/client/ssl-server.jks
      CONNECT_LISTENERS_HTTPS_SSL_KEYSTORE_PASSWORD: changeit
      #listeners.https.ssl.client.auth=requested
      CONNECT_LISTENERS_HTTPS_SSL_CLIENT_AUTH: required
      CONNECT_REST_ADVERTISED_LISTENER: https
      CONNECT_REST_ADVERTISED_HOST_NAME: 0.0.0.0
      CONNECT_REST_ADVERTISED_HOST_PORT: 8083

    volumes:
      - ${PWD}:/data
      - ${CONNECT_SSL_SECRETS_DIR}:/etc/kafka/secrets/client
    #In the command section, $ are replaced with $$ to avoid the error 'Invalid interpolation #format for "command" option'
    # command:
      # - bash
      # - -c
      # - |
        # echo "Installing datagen connector"
        # confluent-hub install --no-prompt confluentinc/kafka-connect-datagen:0.1.2
        # if [[ $$? -ne 0 ]]; then
            # echo -e '\n\n\t--> Connector installation failed. Aborting. <--\n\n'
            # exit 1
        # fi
        # echo "Launching Kafka Connect worker"
        # /etc/confluent/docker/run &
        # sleep infinity

  # kafka-connect-v2.2:
    # image: confluentinc/cp-kafka-connect:5.2.2
    # container_name: kafka-connect-v2.2
    # depends_on:
      # - zookeeper
      # - kafka
      # - schema-registry
    # ports:
      # - 18083:18083
    # environment:
      # CONNECT_BOOTSTRAP_SERVERS: "kafka:29092"
      # CONNECT_REST_PORT: 18083
      # CONNECT_GROUP_ID: compose-connect-group-v2.2
      # CONNECT_CONFIG_STORAGE_TOPIC: _connect-v2.2-configs
      # CONNECT_OFFSET_STORAGE_TOPIC: _connect-v2.2-offsets
      # CONNECT_STATUS_STORAGE_TOPIC: _connect-v2.2-status
      # CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      # CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      # CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      # CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      # CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      # CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      # CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect-v2.2"
      # CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      # CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      # CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      # CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      # CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      # CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components/'
      # # Interceptor config
      # CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      # CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      # CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-5.2.2.jar
    # volumes:
      # - ${PWD}:/data
    # # In the command section, $ are replaced with $$ to avoid the error 'Invalid interpolation format for "command" option'
    # command:
      # - bash
      # - -c
      # - |
        # echo "Installing datagen connector"
        # confluent-hub install --no-prompt confluentinc/kafka-connect-datagen:0.1.2
        # #
        # if [[ $$? -ne 0 ]]; then
            # echo -e '\n\n\t--> Connector installation failed. Aborting. <--\n\n'
            # exit 1
        # fi
        # #
        # echo "Launching Kafka Connect worker"
        # /etc/confluent/docker/run &
        # sleep infinity

  # elasticsearch:
    # image: docker.elastic.co/elasticsearch/elasticsearch:6.7.0
    # container_name: elasticsearch
    # ports:
      # - 9200:9200
    # environment:
      # xpack.security.enabled: "false"
      # ES_JAVA_OPTS: "-Xms1g -Xmx1g"
      # discovery.type: "single-node"
    # command:
      # - bash
      # - -c
      # - |
        # /usr/local/bin/docker-entrypoint.sh &
        # echo "Waiting for Elasticsearch to start ⏳"
        # while [ $$(curl -s -o /dev/null -w %{http_code} http://localhost:9200/) -ne 200 ] ; do
          # echo -e $$(date) " Elasticsearch listener HTTP state: " $$(curl -s -o /dev/null -w %{http_code} http://localhost:9200/) " (waiting for 200)"
          # sleep 5
        # done
        # echo -e "\n--\n+> Creating Elasticsearch dynamic mapping"
        # curl -XPUT "http://localhost:9200/_template/kafkaconnect/" -H 'Content-Type: application/json' -d' { "index_patterns": "*", "settings": { "number_of_shards": 1, "number_of_replicas": 0 }, "mappings": { "_default_": { "dynamic_templates": [ { "dates": { "match": "*TIMESTAMP", "mapping": { "type": "date" } } }, { "non_analysed_string_template": { "match": "*", "match_mapping_type": "string", "mapping": { "type": "keyword" } } } ] } } }'
        # sleep infinity

  # kibana:
    # image: docker.elastic.co/kibana/kibana:6.7.0
    # container_name: kibana
    # depends_on:
      # - elasticsearch
    # ports:
      # - 5601:5601
    # environment:
      # xpack.security.enabled: "false"
      # discovery.type: "single-node"

  postgres:
    # *-----------------------------*
    # To connect to the DB:
    #   docker-compose exec postgres bash -c 'psql -U $POSTGRES_USER $POSTGRES_DB'
    # *-----------------------------*
    image: postgres:11
    environment:
     - POSTGRES_USER=postgres
     - POSTGRES_PASSWORD=postgres
    volumes:
     - ./data/postgres:/docker-entrypoint-initdb.d/
